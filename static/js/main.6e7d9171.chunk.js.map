{"version":3,"sources":["api.js","config.js","components/ArticleList.js","App.js","reportWebVitals.js","index.js"],"names":["getAdaArticles","a","fetch","response","json","ArticleItem","props","article","List","Item","title","Grid","Column","width","style","display","flexDirection","justifyCOntent","Header","as","Description","margin","description","bulleted","horizontal","href","url","source","name","publishedAt","split","ArticleList","divided","maxWidth","articles","map","index","App","state","apiError","this","setState","console","log","Container","textAlign","length","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAQaA,EAAc,uCAAG,8BAAAC,EAAA,sEAEHC,MAAK,yECVJ,qCDQE,cAEpBC,EAFoB,gBAQPA,EAASC,OARF,cAQpBA,EARoB,yBAUnBA,GAVmB,2CAAH,qD,mDELrBC,EAAc,SAACC,GAAW,IAEpBC,EAAYD,EAAZC,QACR,OAAO,eAACC,EAAA,EAAKC,KAAN,WAAYF,EAAQG,MAEvB,cAACC,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,OAAN,CACIC,MAAO,GACPC,MAAO,CACHC,QAAS,OACTC,cAAe,SACfC,eAAgB,cALxB,UASI,cAACC,EAAA,EAAD,CAAQC,GAAG,KAAX,SAAiBZ,EAAQG,QACzB,cAACF,EAAA,EAAKY,YAAN,CAAkBN,MAAO,CAAEO,OAAQ,UAAnC,SACKd,EAAQe,cAGb,eAACd,EAAA,EAAD,CAAMe,UAAQ,EAACC,YAAU,EAAzB,UAEI,cAAChB,EAAA,EAAKC,KAAN,UACI,mBAAGgB,KAAMlB,EAAQmB,IAAjB,SAAuBnB,EAAQoB,OAAOC,SAE1C,cAACpB,EAAA,EAAKC,KAAN,UAAYF,EAAQsB,YAAYC,MAAM,KAAK,iBA2BhDC,EAdK,SAACzB,GAEjB,OACI,cAACE,EAAA,EAAD,CAAMwB,SAAO,EAAClB,MAAO,CAAEmB,SAAU,IAAKZ,OAAQ,UAA9C,SAEKf,EAAM4B,SAASC,KAAI,SAAC5B,EAAS6B,GAAV,OAChB,cAAC,EAAD,CAAa7B,QAASA,GAAcA,EAAQG,MAAQ0B,SCGrDC,E,4MAxCbC,MAAQ,CACNJ,SAAU,GACVK,SAAU,I,8FAGZ,4BAAAtC,EAAA,+EAG2BD,IAH3B,OAGUG,EAHV,OAKIqC,KAAKC,SAAS,CAAEP,SAAU/B,EAAS+B,WAGnCQ,QAAQC,IAAIH,KAAKF,OARrB,gDAUIE,KAAKC,SAAS,CAAEF,SAAU,gCAV9B,yD,0EAeA,WAAU,IAAD,EAEwBC,KAAKF,MAA5BJ,EAFD,EAECA,SAAUK,EAFX,EAEWA,SAElB,OACE,eAACK,EAAA,EAAD,WAEE,cAAC1B,EAAA,EAAD,CAAQC,GAAG,KAAKL,MAAO,CAAE+B,UAAW,SAAUxB,OAAQ,IAAtD,8BAICa,EAASY,OAAS,GAAK,cAAC,EAAD,CAAaZ,SAAUA,IAC9CK,GAAY,uF,GAlCHQ,IAAMC,WCITC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.6e7d9171.chunk.js","sourcesContent":["import { NEWS_API_KEY } from \"./config\"\r\n\r\n/**\r\n * We create and export an arrow function export const getBitcoinArticles = async () => {}. \r\n * The keyword async declares that the function we create is an asynchronous function. \r\n * This keyword is important as we are working with asynchronous code, when weâ€™re \r\n * connecting to the News API. async is required in order to use await.\r\n */\r\nexport const getAdaArticles = async () => {\r\n\r\n    const response = await fetch(\r\n        // filtering all articles with Cardaon in body & in english documentation here\r\n        // https://newsapi.org/docs/endpoints/everything\r\n        `https://newsapi.org/v2/everything?language=en&q=cardano&apiKey=${NEWS_API_KEY}`\r\n    );\r\n\r\n    const json = await response.json();\r\n\r\n    return json;\r\n}","export const NEWS_API_KEY = \"c11cbdf53e0043619f956cda5eddd6e4\";","import React from \"react\";\r\nimport { List, Grid, Header } from \"semantic-ui-react\";\r\n\r\nconst ArticleItem = (props) => {\r\n\r\n    const { article } = props;\r\n    return <List.Item>{article.title}\r\n\r\n        <Grid>\r\n            <Grid.Column\r\n                width={11}\r\n                style={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    justifyCOntent: \"flex-start\",\r\n                }}\r\n            >\r\n\r\n                <Header as=\"h3\">{article.title}</Header>\r\n                <List.Description style={{ margin: \"20px 0\" }}>\r\n                    {article.description}\r\n                </List.Description>\r\n\r\n                <List bulleted horizontal>\r\n\r\n                    <List.Item>\r\n                        <a href={article.url}>{article.source.name}</a>\r\n                    </List.Item>\r\n                    <List.Item>{article.publishedAt.split(\"T\")[0]}</List.Item>\r\n\r\n                </List>\r\n\r\n            </Grid.Column>\r\n\r\n        </Grid>\r\n\r\n\r\n    </List.Item>\r\n\r\n}\r\n\r\nconst ArticleList = (props) => {\r\n\r\n    return (\r\n        <List divided style={{ maxWidth: 900, margin: \"0 auto\" }}>\r\n\r\n            {props.articles.map((article, index) => (\r\n                <ArticleItem article={article} key={article.title + index} />\r\n            ))}\r\n        </List>\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default ArticleList;","import React from 'react';\nimport { getAdaArticles } from './api';\nimport './App.css';\nimport { Container, Header } from \"semantic-ui-react\";\nimport ArticleList from './components/ArticleList';\n\n\n\nclass App extends React.Component {\n\n  state = {\n    articles: [],\n    apiError: \"\",\n  };\n\n  async componentDidMount() {\n\n    try {\n      const response = await getAdaArticles();\n\n      this.setState({ articles: response.articles })\n\n      // this is just proving that the state was reset\n      console.log(this.state)\n    } catch (error) {\n      this.setState({ apiError: \"Could not find nay articles\" })\n    }\n\n  }\n\n  render() {\n\n    const { articles, apiError } = this.state;\n\n    return (\n      <Container>\n\n        <Header as=\"h2\" style={{ textAlign: \"center\", margin: 20 }}>\n          Cardano Articles\n        </Header>\n\n        {articles.length > 0 && <ArticleList articles={articles} />}\n        {apiError && <p>Could not fetch any articles. Please try again.</p>}\n\n      </Container>\n    );\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"semantic-ui-css/semantic.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}